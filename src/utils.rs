use sha2::{Digest, Sha256, Sha512};

pub const SEEDS: [&str; 8] = [
    "seed.bitcoin.sipa.be:8333",
    "dnsseed.bluematt.me:8333",
    "dnsseed.bitcoin.dashjr.org:8333",
    "seed.bitcoinstats.com:8333",
    "seed.bitcoin.jonasschnelli.ch:8333",
    "seed.btc.petertodd.org:8333",
    "seed.bitcoin.sprovoost.nl:8333",
    "dnsseed.emzy.de:8333",
];

pub const VERSION_BYTES: [u8; 134] = [
    0xf9, 0xbe, 0xb4, 0xd9, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x66, 0x00, 0x00, 0x00, 0x18, 0x1b, 0x7a, 0x9d, 0x7e, 0x11, 0x01, 0x00, 0x0d, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x44, 0x27, 0x8d, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
    0x78, 0xe6, 0x63, 0x48, 0x7b, 0xcb, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc6, 0x19, 0x70, 0xb9, 0x27, 0x93, 0x8e, 0xd1, 0x10, 0x2f, 0x53, 0x61, 0x74, 0x6f, 0x73, 0x68,
    0x69, 0x3a, 0x30, 0x2e, 0x31, 0x33, 0x2e, 0x31, 0x2f, 0x8c, 0x3c, 0x08, 0x00, 0x01, 0xe0, 0x39,
    0x38, 0x35, 0x0c, 0x3d, 0xbd, 0x6b,
];

pub const VERACK_BYTES: [u8; 32] = [
    0xf9, 0xbe, 0xb4, 0xd9, 0x76, 0x65, 0x72, 0x61, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x5d, 0xf6, 0xe0, 0xe2, 0x4d, 0x3a, 0x97, 0x39, 0x43, 0x5d, 0x19, 0x1b,
];

pub const GENESIS_HASH: [u8; 32] = [
    0x6f, 0xe2, 0x8c, 0x0a, 0xb6, 0xf1, 0xb3, 0x72, 0xc1, 0xa6, 0xa2, 0x46, 0xae, 0x63, 0xf7, 0x4f,
    0x93, 0x1e, 0x83, 0x65, 0xe1, 0x5a, 0x08, 0x9c, 0x68, 0xd6, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00,
];

pub const FILLER: [u8; 32] = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];

pub fn pretty_dump(buffer: &[u8]) -> () {
    let mut i = 0;
    while i < buffer.len() {
        if i % 16 == 0 {
            if i > 0 {
                print!("\n");
            }
            print!("{:04x} | ", i);
        }
        print!("{:02x} ", buffer[i]);
        i += 1;
    }
    print!("\n");
}

pub fn sha256(data: &[u8]) -> Vec<u8> {
    let mut hasher = Sha256::new();
    hasher.input(data);
    hasher.result().to_vec()
}

pub fn dsha256(data: &[u8]) -> Vec<u8> {
    return sha256(&sha256(&data));
}

pub fn serialize_u32(n: u32) -> [u8; 4] {
    let b3 = ((n >> 24) & 0xff) as u8;
    let b2 = ((n >> 16) & 0xff) as u8;
    let b1 = ((n >> 8) & 0xff) as u8;
    let b0 = ((n >> 0) & 0xff) as u8;
    return [b0, b1, b2, b3];
}

pub fn combine_u32(data: &[u8]) -> u32 {
    (((data[0] as u32) << 0)
        + ((data[1] as u32) << 8)
        + ((data[2] as u32) << 16)
        + ((data[3] as u32) << 24))
        .into()
}

fn make_message_bytes(command: &[u8], payload: &[u8]) -> Vec<u8> {
    let mut result = Vec::new();
    result.extend_from_slice(&[0xf9, 0xbe, 0xb4, 0xd9]);
    result.extend_from_slice(command);
    result.extend_from_slice(&serialize_u32(payload.len() as u32));
    result.extend_from_slice(&dsha256(payload)[0..4]);
    result.extend_from_slice(payload);
    return result;
}

pub fn make_getheaders_bytes(target: &[u8]) -> Vec<u8> {
    let command = "getheaders\0\0".as_bytes();
    let mut payload = Vec::new();
    payload.extend_from_slice(&[0x7f, 0x11, 0x01, 0x00]);
    payload.push(0x01);
    payload.extend_from_slice(target);
    payload.extend_from_slice(&FILLER);
    let bytes = make_message_bytes(&command, &payload);
    return bytes;
}

pub fn make_getdata_bytes(target: &[u8; 32]) -> Vec<u8> {
    let command = "getdata\0\0\0\0\0".as_bytes();
    let mut payload = Vec::new();
    payload.push(0x01);
    payload.extend_from_slice(&[0x02, 0, 0, 0]);
    payload.extend_from_slice(target);
    let bytes = make_message_bytes(&command, &payload);
    return bytes;
}
